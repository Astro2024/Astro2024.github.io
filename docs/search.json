[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/new-new-test-post/index.html",
    "href": "posts/new-new-test-post/index.html",
    "title": "Timnit Gebru",
    "section": "",
    "text": "from source import Perceptron\np = Perceptron()\n\nI did it!!\nnot implemented\nThis is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/new-new-test-post/index.html#math",
    "href": "posts/new-new-test-post/index.html#math",
    "title": "Timnit Gebru",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "posts/example-blog-post/index.html",
    "href": "posts/example-blog-post/index.html",
    "title": "Hello Blog",
    "section": "",
    "text": "%load_ext autoreload %autoreload 2\nfrom source import Perceptron\n\np= Perceptron()\n\nI did it!!\nFigure 1 is an image of the earth\nFigure 2 is a comic about Randall Munroe.\nThis is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/example-blog-post/index.html#math",
    "href": "posts/example-blog-post/index.html#math",
    "title": "Hello Blog",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "posts/classifying-palmer-penguins/index.html",
    "href": "posts/classifying-palmer-penguins/index.html",
    "title": "Classifying Palmer Penguins",
    "section": "",
    "text": "Abstract\n\n\nIn this post I hope to explore the penguin data set and find a combination of variables that will give us the highest accurate rate when trying to predict the species of a penguin. I will start by cleaning up the data and exploring a few visual representation in order to gain insight into some of the most notable variables for species prediction. Then pairing those insights with an exhaustive search, I will find the most effective model(s) and graph their decision boundaries.\n\n#import libraries\nimport warnings\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC # support vector classifier\nfrom mlxtend.plotting import plot_decision_regions # for visualization later\n\n#Importing training data\ntrain_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/train.csv\"\ntrain = pd.read_csv(train_url)\n\n\n#Data Preparation\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train[\"Species\"])\nl = LabelEncoder()\nl.fit(train[\"Island\"])\n\ndef prepare_data(df):\n  df = df.drop([\"studyName\", \"Sample Number\", \"Individual ID\", \"Date Egg\", \"Comments\", \"Region\"], axis = 1)\n  df = df[df[\"Sex\"] != \".\"]\n  df = df.dropna()\n  y = le.transform(df[\"Species\"])\n  df = df.drop([\"Species\"], axis = 1)\n  df = pd.get_dummies(df)\n  return df, y\n\nX_train, y_train = prepare_data(train)\n\n\nfrom itertools import combinations\n\n# these are not actually all the columns: you'll \n# need to add any of the other ones you want to search for\nall_qual_cols = [\"Sex\", \"Clutch Completion\", \"Island\"]\nall_quant_cols = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)', 'Delta 15 N (o/oo)', 'Delta 13 C (o/oo)']\ncolumns = []\nfor qual in all_qual_cols: \n  qual_cols = [col for col in X_train.columns if qual in col ]\n  for pair in combinations(all_quant_cols, 2):\n    cols = qual_cols + list(pair) \n    columns.append(cols) \n\n\n#Additional data preperation for graphics\nd = train[train[\"Sex\"] != \".\"]\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\")\n    d[\"Species\"] = d[\"Species\"].str.split().str.get(0)\n    d[\"Islands\"] = l.transform(d[\"Island\"])\n\n\nThe following graphs are a combination of scatterplots exploring the effectiveness of stratifying the penguin population by Islands x random variable and collection of boxplots exploring the range of flipper length amongs the different species. The plots show that if any penguin is found on Torgersen it will be an Adelie. They also show Adelie and Gentoo are easily distinguishable using islands and most other variable, the most effective being Flipper Length. On the other hand, Chinstrap and Adelie are much harder to distinguish between, the variable Delta 13 C is probably the best variable for trying to differentiate between Chinstrap and Adelie. However, all around, the best variable to pair with Islands is the Culmen Length.\n\nimport seaborn as sns\n\nfig, ax = plt.subplots(2, 2, figsize = (10, 10))\np1 = sns.scatterplot(d, x = \"Islands\", y = \"Delta 13 C (o/oo)\", hue = \"Species\", ax = ax[0,0])\np2 = sns.scatterplot(d, x = \"Islands\", y = \"Flipper Length (mm)\", hue = \"Species\", ax = ax[0,1])\np3 = sns.scatterplot(d, x = \"Islands\", y = \"Body Mass (g)\", hue = \"Species\", ax = ax[1,0])\np4 = sns.scatterplot(d, x = \"Islands\", y = \"Culmen Length (mm)\", hue = \"Species\", ax = ax[1,1])\n\np5 = sns.catplot(data=d, kind=\"bar\", x=\"Island\", y=\"Flipper Length (mm)\", hue=\"Species\")\np6 = sns.displot(d, x=\"Flipper Length (mm)\", col=\"Species\", row=\"Sex\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Finds the best pairing of variables\nbest = ([], 0)\nfrom sklearn.exceptions import ConvergenceWarning\n\nfor x in columns:\n    with warnings.catch_warnings():\n        warnings.filterwarnings(\"ignore\", category=ConvergenceWarning)\n        X_train1 = X_train[x]\n        LR = LogisticRegression()\n        m = LR.fit(X_train1, y_train)\n        score = LR.score(X_train1, y_train)\n        if score &gt; best[1]:\n            best = (x, score)\n        elif score == best[1]:\n            print(x, score)\nprint(best[0], best[1])\n\n['Island_Biscoe', 'Island_Dream', 'Island_Torgersen', 'Culmen Length (mm)', 'Culmen Depth (mm)'] 0.99609375\n['Sex_FEMALE', 'Sex_MALE', 'Culmen Length (mm)', 'Culmen Depth (mm)'] 0.99609375\n\n\n\nThe code above finds the best pairing of three variables. As there are two best pairing, in the code below we train two different models. One for the variables Culmen Length (mm), Culmen Depth (mm), and Sex. The other for Culmen Length (mm), Culmen Depth (mm), and Islands.\n\ntest_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/test.csv\"\ntest = pd.read_csv(test_url)\n\nX_test, y_test = prepare_data(test)\nX_test.head()\n\nLR1 = LogisticRegression()\nLR2 = LogisticRegression()\n\ncols1 = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex_FEMALE', 'Sex_MALE',]\ncols2 = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Island_Biscoe', 'Island_Dream', 'Island_Torgersen']\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\", category=ConvergenceWarning)\n    mf1 = LR1.fit(X_train[cols1], y_train)\n    ms1 = LR1.score(X_test[cols1], y_test)\n    mf2 = LR2.fit(X_train[cols2], y_train)\n    ms2 = LR2.score(X_test[cols2], y_test)\n\n\nfrom matplotlib.patches import Patch\n\ndef plot_regions(model, X, y):\n    \n    x0 = X[X.columns[0]]\n    x1 = X[X.columns[1]]\n    qual_features = X.columns[2:]\n    \n    fig, axarr = plt.subplots(1, len(qual_features), figsize = (7, 3))\n\n    # create a grid\n    grid_x = np.linspace(x0.min(),x0.max(),501)\n    grid_y = np.linspace(x1.min(),x1.max(),501)\n    xx, yy = np.meshgrid(grid_x, grid_y)\n    \n    XX = xx.ravel()\n    YY = yy.ravel()\n\n    for i in range(len(qual_features)):\n      XY = pd.DataFrame({\n          X.columns[0] : XX,\n          X.columns[1] : YY\n      })\n\n      for j in qual_features:\n        XY[j] = 0\n\n      XY[qual_features[i]] = 1\n\n      p = model.predict(XY)\n      p = p.reshape(xx.shape)\n      \n      \n      # use contour plot to visualize the predictions\n      axarr[i].contourf(xx, yy, p, cmap = \"jet\", alpha = 0.2, vmin = 0, vmax = 2)\n      \n      ix = X[qual_features[i]] == 1\n      # plot the data\n      axarr[i].scatter(x0[ix], x1[ix], c = y[ix], cmap = \"jet\", vmin = 0, vmax = 2)\n      \n      axarr[i].set(xlabel = X.columns[0], \n            ylabel  = X.columns[1], \n            title = qual_features[i])\n      \n      patches = []\n      for color, spec in zip([\"red\", \"green\", \"blue\"], [\"Adelie\", \"Chinstrap\", \"Gentoo\"]):\n        patches.append(Patch(color = color, label = spec))\n\n      plt.legend(title = \"Species\", handles = patches, loc = \"best\")\n      \n      plt.tight_layout()\n\n\n#Plots the decision regions for our two model on the training data\nplot_regions(LR1, X_train[cols1], y_train)\nplot_regions(LR2, X_train[cols2], y_train)\n#Plots the decision regions for our two model on the testing data\nplot_regions(LR1, X_test[cols1], y_test)\nplot_regions(LR2, X_test[cols2], y_test)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom sklearn.metrics import confusion_matrix\n\ny_test_pred1 = LR1.predict(X_test[cols1])\ny_test_pred2 = LR2.predict(X_test[cols2])\nC1 = confusion_matrix(y_test, y_test_pred1)\nC2 = confusion_matrix(y_test, y_test_pred2)\nprint(C1, \"First Model\")\nprint(C2, \"Second Model\")\n\n[[31  0  0]\n [ 0 11  0]\n [ 0  0 26]] First Model\n[[31  0  0]\n [ 0 11  0]\n [ 0  0 26]] Second Model\n\n\n\nThere are no errors in either of the models on the dest data. However, looking at the training and test decision regions I would guess the most common errors come between Adelie and Gentoo predictions.\n\nDiscussion:\n\n\nIn this project I have explored a variety of variable combinations and founds two different combinations of three variables that are able to predict penguin species from a test set with a success rate of 100%. With only two variable, depending on which are chosen, it becomes easier to distinguish one of the species but the other two tend to be muddled. However, with the introduction of a third variable the two remaining species become easier to distinguish between. Using the combinations [Culmen Length (mm), Culmen Depth (mm), Sex] and [Culmen Length (mm), Culmen Depth (mm), Islands] we achieve the highest prediction accuracy for penguin species. On the training data we achieve a joint accuracy rate of 99.61% and a success rate of 100% on the test data."
  },
  {
    "objectID": "posts/goal-setting/index.html",
    "href": "posts/goal-setting/index.html",
    "title": "CSCI 0451: Reflective Goal-Setting",
    "section": "",
    "text": "James Hetherington\n\n\nThe knowledge we’ll develop in CSCI 0451 can be broadly divided into four main areas:\n\nTheory: mathematical descriptions of frameworks and algorithms.\nImplementation: effective coding and use of tools in order to implement efficient machine learning algorithms.\nExperimentation: performing experiments to assess the performance of algorithms and clearly communicating about the results.\nSocial responsibility: critical analysis of sources of bias and harm in machine learning algorithms; theoretical formulations of fairness and bias\n\nEvery student should grow toward each of these areas, but you can choose to specialize if you’d like! If there are one or two of these categories on which you’d especially like to focus, list them below. Feel free to include any details that you’d like – this can help me tailor the course content to your interests.\nI would especially like to grow in the implementation and experimentation side of this class. Being a math major, I work endlessly with theory so I would be happy if I actually got to minimize this side of things. Then looking at the last three I have been working on personal automated algorithms as a project for the last two years and I have wanted to incorporate ml into its decision making frame work for the last year or so and have not felt like I had the tools to do so.\nTo recap, the implementation and experimentation most closely connect to what I plan on doing once I graduate this summer.\n\n\n\n\n\nMost blog posts will require around 5-8 hours on average to complete, plus time for revisions in response to feedback. Blog posts will most frequently involve a mix of mathematical problem-solving, coding, experimentation, and written discussion. Some blog posts will ask you to critically discuss recent readings in an essay-like format.\n\nI plan on trying to complete almost every blog post we are assigned. This come with the acknowledgement that I have a busy schedule and I will be competing for the Track and Field team for the entire spring, so some assignments might have delayed publishing.\nI do not want to post any blog posts that are incomplete. I want to finish everything that is asked in the assignment and if I cannot figure something out I will write out a response I where I think I went wrong.\n\n\n\n\nYou make a choice each day about how to show up for class: whether you’ll be prepared, whether you’ll engage with me and your peers in a constructive manner; and whether you’ll be active during lecture and discussions.\nAn especially important form of course presence is the daily warmup. We’ll spend the first 10-15 minutes of most class periods on warmup activities. You’re expected to have prepared the warmup activity ahead of time (this means you’ll need to have completed the readings as well). Each time, we’ll sort into groups of 5-6 students, and one of you (randomly selected) will be responsible for presenting the activity on the whiteboard. If you’re not feeling prepared to present the activity, you can “pass” to the next person, or ask for help along the way.\n\nI always want to ask questions during the class.\nTry to be in-person for every class, with the acknowledgement that I will have job interviews, sports competitions, and family situations that might hinder my attendance.\nComplete every warmup even if I am not able to make the class.\n\n\n\n\nTo finish off the course, you’ll complete a long-term project that showcases your interests and skills. You’ll be free to propose and pursue a topic. My expectation is that most projects will move significantly beyond the content covered in class in some way: you might implement a new algorithm, study a complex data set in depth, or conduct a series of experiments related to assessing algorithmic bias in a certain class of algorithm. You’ll be expected to complete this project in small groups (of your choosing), and update us at a few milestones along the way.\nPlease share a bit about what kind of topic might excite you, and set a few goals about how you plan to show up as a constructive team-member and co-inquirer (see the ideas for some inspiration).\n\nProject 1: Implement a ML model for the automated algorithms I have been working on for the last 2 years\nProject 2: Create a program that takes audio file, classifies what language it is, translates the language to another language, then reads it back to the user.\n\nthis would be a complex problem that would include a lot of NLP, a course I am also currently in. I have various ideas on how to increase accuracy of translation while decreasing the time and space complexity of the model"
  },
  {
    "objectID": "posts/goal-setting/index.html#what-youll-learn",
    "href": "posts/goal-setting/index.html#what-youll-learn",
    "title": "CSCI 0451: Reflective Goal-Setting",
    "section": "",
    "text": "The knowledge we’ll develop in CSCI 0451 can be broadly divided into four main areas:\n\nTheory: mathematical descriptions of frameworks and algorithms.\nImplementation: effective coding and use of tools in order to implement efficient machine learning algorithms.\nExperimentation: performing experiments to assess the performance of algorithms and clearly communicating about the results.\nSocial responsibility: critical analysis of sources of bias and harm in machine learning algorithms; theoretical formulations of fairness and bias\n\nEvery student should grow toward each of these areas, but you can choose to specialize if you’d like! If there are one or two of these categories on which you’d especially like to focus, list them below. Feel free to include any details that you’d like – this can help me tailor the course content to your interests.\nI would especially like to grow in the implementation and experimentation side of this class. Being a math major, I work endlessly with theory so I would be happy if I actually got to minimize this side of things. Then looking at the last three I have been working on personal automated algorithms as a project for the last two years and I have wanted to incorporate ml into its decision making frame work for the last year or so and have not felt like I had the tools to do so.\nTo recap, the implementation and experimentation most closely connect to what I plan on doing once I graduate this summer."
  },
  {
    "objectID": "posts/goal-setting/index.html#what-youll-achieve",
    "href": "posts/goal-setting/index.html#what-youll-achieve",
    "title": "CSCI 0451: Reflective Goal-Setting",
    "section": "",
    "text": "Most blog posts will require around 5-8 hours on average to complete, plus time for revisions in response to feedback. Blog posts will most frequently involve a mix of mathematical problem-solving, coding, experimentation, and written discussion. Some blog posts will ask you to critically discuss recent readings in an essay-like format.\n\nI plan on trying to complete almost every blog post we are assigned. This come with the acknowledgement that I have a busy schedule and I will be competing for the Track and Field team for the entire spring, so some assignments might have delayed publishing.\nI do not want to post any blog posts that are incomplete. I want to finish everything that is asked in the assignment and if I cannot figure something out I will write out a response I where I think I went wrong.\n\n\n\n\nYou make a choice each day about how to show up for class: whether you’ll be prepared, whether you’ll engage with me and your peers in a constructive manner; and whether you’ll be active during lecture and discussions.\nAn especially important form of course presence is the daily warmup. We’ll spend the first 10-15 minutes of most class periods on warmup activities. You’re expected to have prepared the warmup activity ahead of time (this means you’ll need to have completed the readings as well). Each time, we’ll sort into groups of 5-6 students, and one of you (randomly selected) will be responsible for presenting the activity on the whiteboard. If you’re not feeling prepared to present the activity, you can “pass” to the next person, or ask for help along the way.\n\nI always want to ask questions during the class.\nTry to be in-person for every class, with the acknowledgement that I will have job interviews, sports competitions, and family situations that might hinder my attendance.\nComplete every warmup even if I am not able to make the class.\n\n\n\n\nTo finish off the course, you’ll complete a long-term project that showcases your interests and skills. You’ll be free to propose and pursue a topic. My expectation is that most projects will move significantly beyond the content covered in class in some way: you might implement a new algorithm, study a complex data set in depth, or conduct a series of experiments related to assessing algorithmic bias in a certain class of algorithm. You’ll be expected to complete this project in small groups (of your choosing), and update us at a few milestones along the way.\nPlease share a bit about what kind of topic might excite you, and set a few goals about how you plan to show up as a constructive team-member and co-inquirer (see the ideas for some inspiration).\n\nProject 1: Implement a ML model for the automated algorithms I have been working on for the last 2 years\nProject 2: Create a program that takes audio file, classifies what language it is, translates the language to another language, then reads it back to the user.\n\nthis would be a complex problem that would include a lot of NLP, a course I am also currently in. I have various ideas on how to increase accuracy of translation while decreasing the time and space complexity of the model"
  },
  {
    "objectID": "posts/new-test-post/index.html",
    "href": "posts/new-test-post/index.html",
    "title": "Second Post",
    "section": "",
    "text": "This is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/new-test-post/index.html#math",
    "href": "posts/new-test-post/index.html#math",
    "title": "Second Post",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "CSCI 0451: Reflective Goal-Setting\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClassifying Palmer Penguins\n\n\n\n\n\nA blog post exploring predictive variables for penguin species\n\n\n\n\n\nMar 28, 2024\n\n\nJames Hetherington\n\n\n\n\n\n\n\n\n\n\n\n\nSecond Post\n\n\n\n\n\nA new blog post that I just made!\n\n\n\n\n\nMar 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\n\n\n\n\n\n\nTimnit Gebru\n\n\n\n\n\nA new blog post that I just made!\n\n\n\n\n\nMar 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\n\n\n\n\n\n\nHello Blog\n\n\n\n\n\nAn example blog post illustrating the key techniques you’ll need to demonstrate your learning in CSCI 0451.\n\n\n\n\n\nJan 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\nNo matching items"
  }
]